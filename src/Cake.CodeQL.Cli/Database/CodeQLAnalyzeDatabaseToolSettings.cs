namespace Cake.CodeQL.Cli.Database;

/// <summary>
/// Tool for creating CodeQL databases
/// </summary>
public class CodeQLAnalyzeDatabaseToolSettings : CodeQLToolSettings
{
    private readonly List<string> _queryPacks = new List<string>();
    private readonly List<string> _download = new List<string>();

    /// <summary>
    /// Initializes a new instance of the <see cref="CodeQLAnalyzeDatabaseToolSettings"/>
    /// </summary>
    public CodeQLAnalyzeDatabaseToolSettings()
        : base("database analyze")
    { }

    /// <summary>
    /// Specifies the path for the directory that contains the CodeQL database to analyze.
    /// </summary>
    /// <remarks>This is required</remarks>
    public DirectoryPath DatabaseDir { get; set; }

    /// <summary>
    /// Specify CodeQL packs or queries to run. To run the standard queries used for code scanning, omit this parameter.
    /// To see the other query suites included in the CodeQL CLI bundle, look in /&lt;extraction-root&gt;/qlpacks/codeql/&lt;language&gt;-queries/codeql-suites.
    /// For information about creating your own query suite, see Creating CodeQL query suites in the documentation for the CodeQL CLI.
    /// </summary>
    public IList<string> QueryPacks=> _queryPacks;

    /// <summary>
    /// Specify the format for the results file generated by the command. For upload to GitHub this should be: sarif-latest.
    /// </summary>
    /// <remarks>
    /// This is required. Defaults to sarif-latest.
    /// </remarks>
    public string Format { get; set; } = "sarif-latest";

    /// <summary>
    /// Use if some of your CodeQL query packs are not yet on disk and need to be downloaded before running queries.
    /// </summary>
    public IList<string> Download => _download;

    /// <summary>
    /// Specify where to save the SARIF results file.
    /// </summary>
    /// <remarks>
    /// This is required
    /// </remarks>
    public FilePath OutputFile { get; set; }

    /// <summary>
    /// Optional for single database analysis. Required to define the language when you analyze multiple databases for a single commit in a repository.
    /// Specify a category to include in the SARIF results file for this analysis.
    /// A category is used to distinguish multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.
    /// </summary>
    public string SarifCategory { get; set; }

    /// <summary>
    /// Optional. Use if you want to include any available markdown-rendered query help for custom queries used in your analysis.
    /// Any query help for custom queries included in the SARIF output will be displayed in the code scanning UI if the relevant query generates an alert.
    /// </summary>
    public string SarifAddQueryHelp { get; set; }

    /// <summary>
    /// Use if you want to use more than one thread to run queries.
    /// The default value is 1. You can specify more threads to speed up query execution.
    /// To set the number of threads to the number of logical processors, specify 0.
    /// </summary>
    public int? Threads { get; set; }

    /// <summary>
    /// Optional. Use to get more detailed information about the analysis process and diagnostic data from the database creation process
    /// </summary>
    public bool Verbose { get; set; }

    /// <summary>
    /// Evaluates the settings and writes them to <paramref name="args"/>.
    /// </summary>
    /// <param name="args">The argument builder into which the settings should be written.</param>
    protected override void EvaluateCore(ProcessArgumentBuilder args)
    {
        const string equals = "=";

        base.EvaluateCore(args);

        if (DatabaseDir == null) throw new ArgumentNullException(nameof(DatabaseDir), $"Missing required {nameof(DatabaseDir)} property.");
        if (OutputFile == null) throw new ArgumentNullException(nameof(OutputFile), $"Missing required {nameof(OutputFile)} property.");
        if (string.IsNullOrWhiteSpace(Format)) throw new ArgumentException(nameof(Format), $"Missing required {nameof(Format)} property.");
        if(Threads.HasValue && Threads.Value < 0) throw new ArgumentException(nameof(Threads), $"{nameof(Threads)} property cannot have a value less than 0.");

        args.AppendQuoted(DatabaseDir.FullPath);

        if (QueryPacks.Any())
            foreach (var queryPack in QueryPacks)
                args.Append(queryPack);

        args.AppendSwitch("--format", equals, Format);

        args.AppendSwitchQuoted("--output", equals, OutputFile.FullPath);

        if (!string.IsNullOrWhiteSpace(SarifCategory))
            args.AppendSwitch("--sarif-category", equals, SarifCategory);

        if (!string.IsNullOrWhiteSpace(SarifAddQueryHelp))
            args.AppendSwitchQuoted("--sarif-add-query-help", equals, SarifAddQueryHelp);

        if (Threads.HasValue)
            args.AppendSwitch("--threads", equals, Threads.Value.ToString());

        if (Download.Any())
            foreach (var d in Download)
                args.Append(d);

        if (Verbose)
            args.Append("--verbose");
    }
}
